package com.dfire.test.${ServiceName};

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.TypeReference;
import com.dfire.test.util.StringHelper;
import com.dfire.test.util.JsonHelper;
import com.dfire.testBase.TestBase;
import com.twodfire.share.result.Result;

/* Generated by OneKey */

public class ${MethodName} extends TestBase {

	@Resource
	public ${ServiceName} ${serviceName};

	@Test(dataProvider = "CsvDataProvider")
	public void Test(Map<String, String> data) throws Exception {
		//读取用例数据
		String caseid = data.get("caseid");//用例id
		String description = data.get("description");//用例描述
<#list paraMap?keys as key>
	<#if paraMap[key]=="int"> 
		${paraMap[key]} ${key} = Integer.parseInt(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="Integer"> 
		${paraMap[key]} ${key} = Integer.parseInt(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="long"> 
		${paraMap[key]} ${key} = Long.parseLong(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="Long"> 
		${paraMap[key]} ${key} = Long.parseLong(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="short"> 
		${paraMap[key]} ${key} = (short)Integer.parseInt(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="Short"> 
		${paraMap[key]} ${key} = (Short)Integer.parseInt(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="double"> 
		${paraMap[key]} ${key} = Double.parseDouble(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="Double"> 
		${paraMap[key]} ${key} = Double.parseDouble(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="Boolean"> 
		${paraMap[key]} ${key} = StringHelper.convert2Boolean(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="boolean"> 
		${paraMap[key]} ${key} = StringHelper.convert2Boolean(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]=="BigDecimal"> 
		${paraMap[key]} ${key} = new BigDecimal(data.get("${key}"));//入参参数${key_index +1}	
	<#elseif paraMap[key]=="String[]"> 
		String[] ${key} = JsonHelper.stringToObject(StringHelper.convert2String(data.get("${key}")), String[].class);//入参参数${key_index +1}
	<#elseif paraMap[key]=="String"> 
		String ${key} = StringHelper.convert2String(data.get("${key}"));//入参参数${key_index +1}
	<#elseif paraMap[key]?substring(0,3)=="Map">
		${paraMap[key]} ${key} = JsonHelper.stringToObject(StringHelper.convert2String(data.get("${key}")),Map.class);//入参参数${key_index +1}
	<#elseif paraMap[key]?substring(0,4)=="List">
		${paraMap[key]} ${key} = JSON.parseObject(StringHelper.convert2String(data.get("${key}")),new TypeReference<${paraMap[key]}>(){});//入参参数${key_index +1}
	<#else>
		${paraMap[key]} ${key} = JsonHelper.stringToObject(StringHelper.convert2String(data.get("${key}")),${paraMap[key]}.class);//入参参数${key_index +1}
	</#if> 
</#list> 
		boolean expect = StringHelper.convert2Boolean(data.get("expect"));//期望结果
		String message = StringHelper.convert2String(data.get("message"));//期望返回msg信息

		
		${ReturnTypeName} rs = null;
		// 调用服务
		try {
			rs = ${serviceName}.${methodName}(<#list ParameterNames as pn>${pn?trim}<#if pn_has_next>,</#if></#list>);
			Reporter.log("caseid: " + caseid + ",description: " + description, true);
			Reporter.log("Result is: " + JsonHelper.objectToString(rs), true);
		} catch (Exception e) {
			Reporter.log("caseid: " + caseid + ",description: " + description + ",服务调用异常", true);
			e.printStackTrace();
		}
		
		//校验返回结果
		Assert.assertEquals(rs.isSuccess(), expect, "实际返回与期望值不同");
		Assert.assertEquals(rs.getMessage(), message, "实际返回msg与期望值msg不同!");
		
		
		//校验DB if needed
		
	}


	// 数据准备
	@BeforeClass
	public void beforeclass() throws Exception {
		try {
			// 先删后插
		} catch (Exception ex) {
			Reporter.log("beforeclass() 发生异常");
			ex.printStackTrace();
		}

	}

	// 数据清除
	@AfterClass
	public void afterclass() throws Exception {
		try {
			cleanData();
		} catch (Exception ex) {
			Reporter.log("afterclass() 发生异常");
			ex.printStackTrace();
		}
	}

	public void cleanData() throws Exception {
	}
}